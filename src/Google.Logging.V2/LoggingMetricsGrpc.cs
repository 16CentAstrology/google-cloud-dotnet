// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_metrics.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Logging.V2 {
  public static class MetricsServiceV2
  {
    static readonly string __ServiceName = "google.logging.v2.MetricsServiceV2";

    static readonly Marshaller<global::Google.Logging.V2.ListLogMetricsRequest> __Marshaller_ListLogMetricsRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.ListLogMetricsRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.ListLogMetricsResponse> __Marshaller_ListLogMetricsResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.ListLogMetricsResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.GetLogMetricRequest> __Marshaller_GetLogMetricRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.GetLogMetricRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.LogMetric> __Marshaller_LogMetric = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.LogMetric.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.CreateLogMetricRequest> __Marshaller_CreateLogMetricRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.CreateLogMetricRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.UpdateLogMetricRequest> __Marshaller_UpdateLogMetricRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.UpdateLogMetricRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.DeleteLogMetricRequest> __Marshaller_DeleteLogMetricRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.DeleteLogMetricRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);

    static readonly Method<global::Google.Logging.V2.ListLogMetricsRequest, global::Google.Logging.V2.ListLogMetricsResponse> __Method_ListLogMetrics = new Method<global::Google.Logging.V2.ListLogMetricsRequest, global::Google.Logging.V2.ListLogMetricsResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListLogMetrics",
        __Marshaller_ListLogMetricsRequest,
        __Marshaller_ListLogMetricsResponse);

    static readonly Method<global::Google.Logging.V2.GetLogMetricRequest, global::Google.Logging.V2.LogMetric> __Method_GetLogMetric = new Method<global::Google.Logging.V2.GetLogMetricRequest, global::Google.Logging.V2.LogMetric>(
        MethodType.Unary,
        __ServiceName,
        "GetLogMetric",
        __Marshaller_GetLogMetricRequest,
        __Marshaller_LogMetric);

    static readonly Method<global::Google.Logging.V2.CreateLogMetricRequest, global::Google.Logging.V2.LogMetric> __Method_CreateLogMetric = new Method<global::Google.Logging.V2.CreateLogMetricRequest, global::Google.Logging.V2.LogMetric>(
        MethodType.Unary,
        __ServiceName,
        "CreateLogMetric",
        __Marshaller_CreateLogMetricRequest,
        __Marshaller_LogMetric);

    static readonly Method<global::Google.Logging.V2.UpdateLogMetricRequest, global::Google.Logging.V2.LogMetric> __Method_UpdateLogMetric = new Method<global::Google.Logging.V2.UpdateLogMetricRequest, global::Google.Logging.V2.LogMetric>(
        MethodType.Unary,
        __ServiceName,
        "UpdateLogMetric",
        __Marshaller_UpdateLogMetricRequest,
        __Marshaller_LogMetric);

    static readonly Method<global::Google.Logging.V2.DeleteLogMetricRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteLogMetric = new Method<global::Google.Logging.V2.DeleteLogMetricRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "DeleteLogMetric",
        __Marshaller_DeleteLogMetricRequest,
        __Marshaller_Empty);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Logging.V2.LoggingMetricsReflection.Descriptor.Services[0]; }
    }

    // client interface
    public interface IMetricsServiceV2Client
    {
      global::Google.Logging.V2.ListLogMetricsResponse ListLogMetrics(global::Google.Logging.V2.ListLogMetricsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Logging.V2.ListLogMetricsResponse ListLogMetrics(global::Google.Logging.V2.ListLogMetricsRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Logging.V2.ListLogMetricsResponse> ListLogMetricsAsync(global::Google.Logging.V2.ListLogMetricsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Logging.V2.ListLogMetricsResponse> ListLogMetricsAsync(global::Google.Logging.V2.ListLogMetricsRequest request, CallOptions options);
      global::Google.Logging.V2.LogMetric GetLogMetric(global::Google.Logging.V2.GetLogMetricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Logging.V2.LogMetric GetLogMetric(global::Google.Logging.V2.GetLogMetricRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Logging.V2.LogMetric> GetLogMetricAsync(global::Google.Logging.V2.GetLogMetricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Logging.V2.LogMetric> GetLogMetricAsync(global::Google.Logging.V2.GetLogMetricRequest request, CallOptions options);
      global::Google.Logging.V2.LogMetric CreateLogMetric(global::Google.Logging.V2.CreateLogMetricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Logging.V2.LogMetric CreateLogMetric(global::Google.Logging.V2.CreateLogMetricRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Logging.V2.LogMetric> CreateLogMetricAsync(global::Google.Logging.V2.CreateLogMetricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Logging.V2.LogMetric> CreateLogMetricAsync(global::Google.Logging.V2.CreateLogMetricRequest request, CallOptions options);
      global::Google.Logging.V2.LogMetric UpdateLogMetric(global::Google.Logging.V2.UpdateLogMetricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Logging.V2.LogMetric UpdateLogMetric(global::Google.Logging.V2.UpdateLogMetricRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Logging.V2.LogMetric> UpdateLogMetricAsync(global::Google.Logging.V2.UpdateLogMetricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Logging.V2.LogMetric> UpdateLogMetricAsync(global::Google.Logging.V2.UpdateLogMetricRequest request, CallOptions options);
      global::Google.Protobuf.WellKnownTypes.Empty DeleteLogMetric(global::Google.Logging.V2.DeleteLogMetricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Protobuf.WellKnownTypes.Empty DeleteLogMetric(global::Google.Logging.V2.DeleteLogMetricRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteLogMetricAsync(global::Google.Logging.V2.DeleteLogMetricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteLogMetricAsync(global::Google.Logging.V2.DeleteLogMetricRequest request, CallOptions options);
    }

    // server-side interface
    public interface IMetricsServiceV2
    {
      Task<global::Google.Logging.V2.ListLogMetricsResponse> ListLogMetrics(global::Google.Logging.V2.ListLogMetricsRequest request, ServerCallContext context);
      Task<global::Google.Logging.V2.LogMetric> GetLogMetric(global::Google.Logging.V2.GetLogMetricRequest request, ServerCallContext context);
      Task<global::Google.Logging.V2.LogMetric> CreateLogMetric(global::Google.Logging.V2.CreateLogMetricRequest request, ServerCallContext context);
      Task<global::Google.Logging.V2.LogMetric> UpdateLogMetric(global::Google.Logging.V2.UpdateLogMetricRequest request, ServerCallContext context);
      Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteLogMetric(global::Google.Logging.V2.DeleteLogMetricRequest request, ServerCallContext context);
    }

    // client stub
    public class MetricsServiceV2Client : ClientBase, IMetricsServiceV2Client
    {
      public MetricsServiceV2Client(Channel channel) : base(channel)
      {
      }
      public global::Google.Logging.V2.ListLogMetricsResponse ListLogMetrics(global::Google.Logging.V2.ListLogMetricsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_ListLogMetrics, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Logging.V2.ListLogMetricsResponse ListLogMetrics(global::Google.Logging.V2.ListLogMetricsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_ListLogMetrics, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Logging.V2.ListLogMetricsResponse> ListLogMetricsAsync(global::Google.Logging.V2.ListLogMetricsRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_ListLogMetrics, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Logging.V2.ListLogMetricsResponse> ListLogMetricsAsync(global::Google.Logging.V2.ListLogMetricsRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_ListLogMetrics, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Logging.V2.LogMetric GetLogMetric(global::Google.Logging.V2.GetLogMetricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetLogMetric, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Logging.V2.LogMetric GetLogMetric(global::Google.Logging.V2.GetLogMetricRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetLogMetric, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Logging.V2.LogMetric> GetLogMetricAsync(global::Google.Logging.V2.GetLogMetricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetLogMetric, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Logging.V2.LogMetric> GetLogMetricAsync(global::Google.Logging.V2.GetLogMetricRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetLogMetric, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Logging.V2.LogMetric CreateLogMetric(global::Google.Logging.V2.CreateLogMetricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CreateLogMetric, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Logging.V2.LogMetric CreateLogMetric(global::Google.Logging.V2.CreateLogMetricRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_CreateLogMetric, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Logging.V2.LogMetric> CreateLogMetricAsync(global::Google.Logging.V2.CreateLogMetricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CreateLogMetric, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Logging.V2.LogMetric> CreateLogMetricAsync(global::Google.Logging.V2.CreateLogMetricRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_CreateLogMetric, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Logging.V2.LogMetric UpdateLogMetric(global::Google.Logging.V2.UpdateLogMetricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_UpdateLogMetric, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Logging.V2.LogMetric UpdateLogMetric(global::Google.Logging.V2.UpdateLogMetricRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_UpdateLogMetric, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Logging.V2.LogMetric> UpdateLogMetricAsync(global::Google.Logging.V2.UpdateLogMetricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_UpdateLogMetric, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Logging.V2.LogMetric> UpdateLogMetricAsync(global::Google.Logging.V2.UpdateLogMetricRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_UpdateLogMetric, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Protobuf.WellKnownTypes.Empty DeleteLogMetric(global::Google.Logging.V2.DeleteLogMetricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_DeleteLogMetric, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Protobuf.WellKnownTypes.Empty DeleteLogMetric(global::Google.Logging.V2.DeleteLogMetricRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_DeleteLogMetric, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteLogMetricAsync(global::Google.Logging.V2.DeleteLogMetricRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_DeleteLogMetric, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteLogMetricAsync(global::Google.Logging.V2.DeleteLogMetricRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_DeleteLogMetric, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IMetricsServiceV2 serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_ListLogMetrics, serviceImpl.ListLogMetrics)
          .AddMethod(__Method_GetLogMetric, serviceImpl.GetLogMetric)
          .AddMethod(__Method_CreateLogMetric, serviceImpl.CreateLogMetric)
          .AddMethod(__Method_UpdateLogMetric, serviceImpl.UpdateLogMetric)
          .AddMethod(__Method_DeleteLogMetric, serviceImpl.DeleteLogMetric).Build();
    }

    // creates a new client
    public static MetricsServiceV2Client NewClient(Channel channel)
    {
      return new MetricsServiceV2Client(channel);
    }

  }
}
#endregion
