// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_config.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Logging.V2 {
  public static class ConfigServiceV2
  {
    static readonly string __ServiceName = "google.logging.v2.ConfigServiceV2";

    static readonly Marshaller<global::Google.Logging.V2.ListSinksRequest> __Marshaller_ListSinksRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.ListSinksRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.ListSinksResponse> __Marshaller_ListSinksResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.ListSinksResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.GetSinkRequest> __Marshaller_GetSinkRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.GetSinkRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.LogSink> __Marshaller_LogSink = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.LogSink.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.CreateSinkRequest> __Marshaller_CreateSinkRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.CreateSinkRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.UpdateSinkRequest> __Marshaller_UpdateSinkRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.UpdateSinkRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Logging.V2.DeleteSinkRequest> __Marshaller_DeleteSinkRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Logging.V2.DeleteSinkRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);

    static readonly Method<global::Google.Logging.V2.ListSinksRequest, global::Google.Logging.V2.ListSinksResponse> __Method_ListSinks = new Method<global::Google.Logging.V2.ListSinksRequest, global::Google.Logging.V2.ListSinksResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListSinks",
        __Marshaller_ListSinksRequest,
        __Marshaller_ListSinksResponse);

    static readonly Method<global::Google.Logging.V2.GetSinkRequest, global::Google.Logging.V2.LogSink> __Method_GetSink = new Method<global::Google.Logging.V2.GetSinkRequest, global::Google.Logging.V2.LogSink>(
        MethodType.Unary,
        __ServiceName,
        "GetSink",
        __Marshaller_GetSinkRequest,
        __Marshaller_LogSink);

    static readonly Method<global::Google.Logging.V2.CreateSinkRequest, global::Google.Logging.V2.LogSink> __Method_CreateSink = new Method<global::Google.Logging.V2.CreateSinkRequest, global::Google.Logging.V2.LogSink>(
        MethodType.Unary,
        __ServiceName,
        "CreateSink",
        __Marshaller_CreateSinkRequest,
        __Marshaller_LogSink);

    static readonly Method<global::Google.Logging.V2.UpdateSinkRequest, global::Google.Logging.V2.LogSink> __Method_UpdateSink = new Method<global::Google.Logging.V2.UpdateSinkRequest, global::Google.Logging.V2.LogSink>(
        MethodType.Unary,
        __ServiceName,
        "UpdateSink",
        __Marshaller_UpdateSinkRequest,
        __Marshaller_LogSink);

    static readonly Method<global::Google.Logging.V2.DeleteSinkRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteSink = new Method<global::Google.Logging.V2.DeleteSinkRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        MethodType.Unary,
        __ServiceName,
        "DeleteSink",
        __Marshaller_DeleteSinkRequest,
        __Marshaller_Empty);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Logging.V2.LoggingConfigReflection.Descriptor.Services[0]; }
    }

    // client interface
    public interface IConfigServiceV2Client
    {
      global::Google.Logging.V2.ListSinksResponse ListSinks(global::Google.Logging.V2.ListSinksRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Logging.V2.ListSinksResponse ListSinks(global::Google.Logging.V2.ListSinksRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Logging.V2.ListSinksResponse> ListSinksAsync(global::Google.Logging.V2.ListSinksRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Logging.V2.ListSinksResponse> ListSinksAsync(global::Google.Logging.V2.ListSinksRequest request, CallOptions options);
      global::Google.Logging.V2.LogSink GetSink(global::Google.Logging.V2.GetSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Logging.V2.LogSink GetSink(global::Google.Logging.V2.GetSinkRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Logging.V2.LogSink> GetSinkAsync(global::Google.Logging.V2.GetSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Logging.V2.LogSink> GetSinkAsync(global::Google.Logging.V2.GetSinkRequest request, CallOptions options);
      global::Google.Logging.V2.LogSink CreateSink(global::Google.Logging.V2.CreateSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Logging.V2.LogSink CreateSink(global::Google.Logging.V2.CreateSinkRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Logging.V2.LogSink> CreateSinkAsync(global::Google.Logging.V2.CreateSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Logging.V2.LogSink> CreateSinkAsync(global::Google.Logging.V2.CreateSinkRequest request, CallOptions options);
      global::Google.Logging.V2.LogSink UpdateSink(global::Google.Logging.V2.UpdateSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Logging.V2.LogSink UpdateSink(global::Google.Logging.V2.UpdateSinkRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Logging.V2.LogSink> UpdateSinkAsync(global::Google.Logging.V2.UpdateSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Logging.V2.LogSink> UpdateSinkAsync(global::Google.Logging.V2.UpdateSinkRequest request, CallOptions options);
      global::Google.Protobuf.WellKnownTypes.Empty DeleteSink(global::Google.Logging.V2.DeleteSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Protobuf.WellKnownTypes.Empty DeleteSink(global::Google.Logging.V2.DeleteSinkRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSinkAsync(global::Google.Logging.V2.DeleteSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSinkAsync(global::Google.Logging.V2.DeleteSinkRequest request, CallOptions options);
    }

    // server-side interface
    public interface IConfigServiceV2
    {
      Task<global::Google.Logging.V2.ListSinksResponse> ListSinks(global::Google.Logging.V2.ListSinksRequest request, ServerCallContext context);
      Task<global::Google.Logging.V2.LogSink> GetSink(global::Google.Logging.V2.GetSinkRequest request, ServerCallContext context);
      Task<global::Google.Logging.V2.LogSink> CreateSink(global::Google.Logging.V2.CreateSinkRequest request, ServerCallContext context);
      Task<global::Google.Logging.V2.LogSink> UpdateSink(global::Google.Logging.V2.UpdateSinkRequest request, ServerCallContext context);
      Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSink(global::Google.Logging.V2.DeleteSinkRequest request, ServerCallContext context);
    }

    // client stub
    public class ConfigServiceV2Client : ClientBase, IConfigServiceV2Client
    {
      public ConfigServiceV2Client(Channel channel) : base(channel)
      {
      }
      public global::Google.Logging.V2.ListSinksResponse ListSinks(global::Google.Logging.V2.ListSinksRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_ListSinks, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Logging.V2.ListSinksResponse ListSinks(global::Google.Logging.V2.ListSinksRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_ListSinks, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Logging.V2.ListSinksResponse> ListSinksAsync(global::Google.Logging.V2.ListSinksRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_ListSinks, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Logging.V2.ListSinksResponse> ListSinksAsync(global::Google.Logging.V2.ListSinksRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_ListSinks, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Logging.V2.LogSink GetSink(global::Google.Logging.V2.GetSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetSink, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Logging.V2.LogSink GetSink(global::Google.Logging.V2.GetSinkRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetSink, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Logging.V2.LogSink> GetSinkAsync(global::Google.Logging.V2.GetSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetSink, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Logging.V2.LogSink> GetSinkAsync(global::Google.Logging.V2.GetSinkRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetSink, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Logging.V2.LogSink CreateSink(global::Google.Logging.V2.CreateSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CreateSink, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Logging.V2.LogSink CreateSink(global::Google.Logging.V2.CreateSinkRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_CreateSink, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Logging.V2.LogSink> CreateSinkAsync(global::Google.Logging.V2.CreateSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CreateSink, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Logging.V2.LogSink> CreateSinkAsync(global::Google.Logging.V2.CreateSinkRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_CreateSink, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Logging.V2.LogSink UpdateSink(global::Google.Logging.V2.UpdateSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_UpdateSink, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Logging.V2.LogSink UpdateSink(global::Google.Logging.V2.UpdateSinkRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_UpdateSink, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Logging.V2.LogSink> UpdateSinkAsync(global::Google.Logging.V2.UpdateSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_UpdateSink, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Logging.V2.LogSink> UpdateSinkAsync(global::Google.Logging.V2.UpdateSinkRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_UpdateSink, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Protobuf.WellKnownTypes.Empty DeleteSink(global::Google.Logging.V2.DeleteSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_DeleteSink, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Protobuf.WellKnownTypes.Empty DeleteSink(global::Google.Logging.V2.DeleteSinkRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_DeleteSink, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSinkAsync(global::Google.Logging.V2.DeleteSinkRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_DeleteSink, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteSinkAsync(global::Google.Logging.V2.DeleteSinkRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_DeleteSink, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IConfigServiceV2 serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_ListSinks, serviceImpl.ListSinks)
          .AddMethod(__Method_GetSink, serviceImpl.GetSink)
          .AddMethod(__Method_CreateSink, serviceImpl.CreateSink)
          .AddMethod(__Method_UpdateSink, serviceImpl.UpdateSink)
          .AddMethod(__Method_DeleteSink, serviceImpl.DeleteSink).Build();
    }

    // creates a new client
    public static ConfigServiceV2Client NewClient(Channel channel)
    {
      return new ConfigServiceV2Client(channel);
    }

  }
}
#endregion
