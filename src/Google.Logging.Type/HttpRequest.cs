// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/type/http_request.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Logging.Type {

  /// <summary>Holder for reflection information generated from google/logging/type/http_request.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class HttpRequestReflection {

    #region Descriptor
    /// <summary>File descriptor for google/logging/type/http_request.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HttpRequestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZnb29nbGUvbG9nZ2luZy90eXBlL2h0dHBfcmVxdWVzdC5wcm90bxITZ29v",
            "Z2xlLmxvZ2dpbmcudHlwZRocZ29vZ2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90",
            "byLoAQoLSHR0cFJlcXVlc3QSFgoOcmVxdWVzdF9tZXRob2QYASABKAkSEwoL",
            "cmVxdWVzdF91cmwYAiABKAkSFAoMcmVxdWVzdF9zaXplGAMgASgDEg4KBnN0",
            "YXR1cxgEIAEoBRIVCg1yZXNwb25zZV9zaXplGAUgASgDEhIKCnVzZXJfYWdl",
            "bnQYBiABKAkSEQoJcmVtb3RlX2lwGAcgASgJEg8KB3JlZmVyZXIYCCABKAkS",
            "EQoJY2FjaGVfaGl0GAkgASgIEiQKHHZhbGlkYXRlZF93aXRoX29yaWdpbl9z",
            "ZXJ2ZXIYCiABKAhCLQoXY29tLmdvb2dsZS5sb2dnaW5nLnR5cGVCEEh0dHBS",
            "ZXF1ZXN0UHJvdG9QAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Google.Logging.Type.HttpRequest), global::Google.Logging.Type.HttpRequest.Parser, new[]{ "RequestMethod", "RequestUrl", "RequestSize", "Status", "ResponseSize", "UserAgent", "RemoteIp", "Referer", "CacheHit", "ValidatedWithOriginServer" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  A common proto for logging HTTP requests.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class HttpRequest : pb::IMessage<HttpRequest> {
    private static readonly pb::MessageParser<HttpRequest> _parser = new pb::MessageParser<HttpRequest>(() => new HttpRequest());
    public static pb::MessageParser<HttpRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Logging.Type.HttpRequestReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public HttpRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public HttpRequest(HttpRequest other) : this() {
      requestMethod_ = other.requestMethod_;
      requestUrl_ = other.requestUrl_;
      requestSize_ = other.requestSize_;
      status_ = other.status_;
      responseSize_ = other.responseSize_;
      userAgent_ = other.userAgent_;
      remoteIp_ = other.remoteIp_;
      referer_ = other.referer_;
      cacheHit_ = other.cacheHit_;
      validatedWithOriginServer_ = other.validatedWithOriginServer_;
    }

    public HttpRequest Clone() {
      return new HttpRequest(this);
    }

    /// <summary>Field number for the "request_method" field.</summary>
    public const int RequestMethodFieldNumber = 1;
    private string requestMethod_ = "";
    /// <summary>
    ///  The request method. Examples: `"GET"`, `"HEAD"`, `"PUT"`, `"POST"`.
    /// </summary>
    public string RequestMethod {
      get { return requestMethod_; }
      set {
        requestMethod_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request_url" field.</summary>
    public const int RequestUrlFieldNumber = 2;
    private string requestUrl_ = "";
    /// <summary>
    ///  The scheme (http, https), the host name, the path and the query
    ///  portion of the URL that was requested.
    ///  Example: `"http://example.com/some/info?color=red"`.
    /// </summary>
    public string RequestUrl {
      get { return requestUrl_; }
      set {
        requestUrl_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "request_size" field.</summary>
    public const int RequestSizeFieldNumber = 3;
    private long requestSize_;
    /// <summary>
    ///  The size of the HTTP request message in bytes, including the request
    ///  headers and the request body.
    /// </summary>
    public long RequestSize {
      get { return requestSize_; }
      set {
        requestSize_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private int status_;
    /// <summary>
    ///  The response code indicating the status of response.
    ///  Examples: 200, 404.
    /// </summary>
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "response_size" field.</summary>
    public const int ResponseSizeFieldNumber = 5;
    private long responseSize_;
    /// <summary>
    ///  The size of the HTTP response message sent back to the client, in bytes,
    ///  including the response headers and the response body.
    /// </summary>
    public long ResponseSize {
      get { return responseSize_; }
      set {
        responseSize_ = value;
      }
    }

    /// <summary>Field number for the "user_agent" field.</summary>
    public const int UserAgentFieldNumber = 6;
    private string userAgent_ = "";
    /// <summary>
    ///  The user agent sent by the client. Example:
    ///  `"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)"`.
    /// </summary>
    public string UserAgent {
      get { return userAgent_; }
      set {
        userAgent_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remote_ip" field.</summary>
    public const int RemoteIpFieldNumber = 7;
    private string remoteIp_ = "";
    /// <summary>
    ///  The IP address (IPv4 or IPv6) of the client that issued the HTTP
    ///  request. Examples: `"192.168.1.1"`, `"FE80::0202:B3FF:FE1E:8329"`.
    /// </summary>
    public string RemoteIp {
      get { return remoteIp_; }
      set {
        remoteIp_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "referer" field.</summary>
    public const int RefererFieldNumber = 8;
    private string referer_ = "";
    /// <summary>
    ///  The referer URL of the request, as defined in
    ///  [HTTP/1.1 Header Field Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
    /// </summary>
    public string Referer {
      get { return referer_; }
      set {
        referer_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cache_hit" field.</summary>
    public const int CacheHitFieldNumber = 9;
    private bool cacheHit_;
    /// <summary>
    ///  Whether or not an entity was served from cache
    ///  (with or without validation).
    /// </summary>
    public bool CacheHit {
      get { return cacheHit_; }
      set {
        cacheHit_ = value;
      }
    }

    /// <summary>Field number for the "validated_with_origin_server" field.</summary>
    public const int ValidatedWithOriginServerFieldNumber = 10;
    private bool validatedWithOriginServer_;
    /// <summary>
    ///  Whether or not the response was validated with the origin server before
    ///  being served from cache. This field is only meaningful if `cache_hit` is
    ///  True.
    /// </summary>
    public bool ValidatedWithOriginServer {
      get { return validatedWithOriginServer_; }
      set {
        validatedWithOriginServer_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as HttpRequest);
    }

    public bool Equals(HttpRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestMethod != other.RequestMethod) return false;
      if (RequestUrl != other.RequestUrl) return false;
      if (RequestSize != other.RequestSize) return false;
      if (Status != other.Status) return false;
      if (ResponseSize != other.ResponseSize) return false;
      if (UserAgent != other.UserAgent) return false;
      if (RemoteIp != other.RemoteIp) return false;
      if (Referer != other.Referer) return false;
      if (CacheHit != other.CacheHit) return false;
      if (ValidatedWithOriginServer != other.ValidatedWithOriginServer) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (RequestMethod.Length != 0) hash ^= RequestMethod.GetHashCode();
      if (RequestUrl.Length != 0) hash ^= RequestUrl.GetHashCode();
      if (RequestSize != 0L) hash ^= RequestSize.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ResponseSize != 0L) hash ^= ResponseSize.GetHashCode();
      if (UserAgent.Length != 0) hash ^= UserAgent.GetHashCode();
      if (RemoteIp.Length != 0) hash ^= RemoteIp.GetHashCode();
      if (Referer.Length != 0) hash ^= Referer.GetHashCode();
      if (CacheHit != false) hash ^= CacheHit.GetHashCode();
      if (ValidatedWithOriginServer != false) hash ^= ValidatedWithOriginServer.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestMethod.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestMethod);
      }
      if (RequestUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RequestUrl);
      }
      if (RequestSize != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RequestSize);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Status);
      }
      if (ResponseSize != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ResponseSize);
      }
      if (UserAgent.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UserAgent);
      }
      if (RemoteIp.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RemoteIp);
      }
      if (Referer.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Referer);
      }
      if (CacheHit != false) {
        output.WriteRawTag(72);
        output.WriteBool(CacheHit);
      }
      if (ValidatedWithOriginServer != false) {
        output.WriteRawTag(80);
        output.WriteBool(ValidatedWithOriginServer);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RequestMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestMethod);
      }
      if (RequestUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestUrl);
      }
      if (RequestSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequestSize);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (ResponseSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ResponseSize);
      }
      if (UserAgent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserAgent);
      }
      if (RemoteIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteIp);
      }
      if (Referer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Referer);
      }
      if (CacheHit != false) {
        size += 1 + 1;
      }
      if (ValidatedWithOriginServer != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(HttpRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestMethod.Length != 0) {
        RequestMethod = other.RequestMethod;
      }
      if (other.RequestUrl.Length != 0) {
        RequestUrl = other.RequestUrl;
      }
      if (other.RequestSize != 0L) {
        RequestSize = other.RequestSize;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ResponseSize != 0L) {
        ResponseSize = other.ResponseSize;
      }
      if (other.UserAgent.Length != 0) {
        UserAgent = other.UserAgent;
      }
      if (other.RemoteIp.Length != 0) {
        RemoteIp = other.RemoteIp;
      }
      if (other.Referer.Length != 0) {
        Referer = other.Referer;
      }
      if (other.CacheHit != false) {
        CacheHit = other.CacheHit;
      }
      if (other.ValidatedWithOriginServer != false) {
        ValidatedWithOriginServer = other.ValidatedWithOriginServer;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RequestMethod = input.ReadString();
            break;
          }
          case 18: {
            RequestUrl = input.ReadString();
            break;
          }
          case 24: {
            RequestSize = input.ReadInt64();
            break;
          }
          case 32: {
            Status = input.ReadInt32();
            break;
          }
          case 40: {
            ResponseSize = input.ReadInt64();
            break;
          }
          case 50: {
            UserAgent = input.ReadString();
            break;
          }
          case 58: {
            RemoteIp = input.ReadString();
            break;
          }
          case 66: {
            Referer = input.ReadString();
            break;
          }
          case 72: {
            CacheHit = input.ReadBool();
            break;
          }
          case 80: {
            ValidatedWithOriginServer = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
